comm_range:
  v2rsu: 100            # vehicle to RSU

simulation:
  ROU_FILE: '../osm_boston_common/osm.passenger.trips.xml' # route data (given a network, what paths can be taken?)
  NET_FILE: '../osm_boston_common/osm.net.xml' # network data (layout of the road)
  FCD_FILE: '../osm_boston_common/osm_fcd.xml' # floating car data (location and speed of every car in the network)
  # ROU_FILE: ''
  # NET_FILE: '../MonacoST/most.net.xml'
  # FCD_FILE: '../MonacoST/most_fcd.xml'
  # ROU_FILE: '../osm_london/osm.passenger.trips.xml'
  # NET_FILE: '../osm_london/osm.net.xml'
  # FCD_FILE: '../osm_london/london_fcd.xml'

  num_rsu: 5            # number of RSUs
  num_vc: 0 # number of stationary vehicular clouds (0, 2, 4, 6, 8, 10)
  vc_min_vehi: 5 # number of vehicles required to form a vehicular cloud
  maximum_rsu_accumulative_gradients: 10 # how many gradients does an RSU accumulate from vehicles before uploading to the central server
  maximum_central_server_accumulative_gradients: 10 # how many gradients does the central server accumulate from vehicles before updating its model?

neural_network:
  batch_size: 1
  warm_up_epochs: 4
  epoch: 10
  # cifar lr = 0.0005
  # pascalvoc learning rata = 0.001
  learning_rate: 0.001

seed: 99

pascalvoc_metrics:
  iou_threshold: 0.3
  # the yolo models provided by gluon require either 320 x 320 or 416 x 416, each model only supports one size
  height: 320
  width: 320

communication:
  # Write the size of each set of gradients transmitted from a vehicle to an RSU
  write_gradient_size: false

  # NOTE: Only choose one of the two communication efficient techniques. If both are selected,
  # top_k_enabled will be the only technique used.
  top_k_enabled: false # Largest K gradients from each layer of the network will be sent from vehicle to RSU.
  send_random_k_layers: false # K random layers of the network will be sent from vehicle to RSU

  k: 3


# ********* Statistical Analysis Parameters *********
# Write runtime statistics in csv files.
write_runtime_statistics: false
# Print CPU and Memory Usage
write_cpu_and_memory: false
# Instead of partitioning by classes, partition so that every zone has equal training data for faster performance.
even_distribution: false




# ********* frequently changed parameters ***************
# mnist, cifar10, pascalvoc
dataset: 'pascalvoc'
# percentage of data in each zone that is random (not organized by classes)
dataset_random_distribution: 0.5
# 60000 for mnist, 16551 for pascalvoc
# minimum training data size for pascalvoc is 40, since we load in quarters and divide by 10
num_training_data: 40
num_val_train_data: 10
num_test_data: 10


aggregation_method: 'simplemean' # simplemean, cgc
attack: 'noattack'  # signflip, gaussian, bitflip, label, noattack
num_faulty_grads: 2

cgc_method: 'by-layer' # by-layer, multiply
