comm_range:
  v2rsu: 100            # vehicle to RSU

simulation:
  ROU_FILE: '../osm_boston_common/osm.passenger.trips.xml' # route data (given a network, what paths can be taken?)
  NET_FILE: '../osm_boston_common/osm.net.xml' # network data (layout of the road)
  FCD_FILE: '../osm_boston_common/osm_fcd.xml' # floating car data (location and speed of every car in the network)
  # ROU_FILE: ''
  # NET_FILE: '../MonacoST/most.net.xml'
  # FCD_FILE: '../MonacoST/most_fcd.xml'
  # ROU_FILE: '../osm_london/osm.passenger.trips.xml'
  # NET_FILE: '../osm_london/osm.net.xml'
  # FCD_FILE: '../osm_london/london_fcd.xml'

  num_rsu: 5            # number of RSUs
  num_vc: 0 # number of stationary vehicular clouds (0, 2, 4, 6, 8, 10)
  vc_min_vehi: 5 # number of vehicles required to form a vehicular cloud
  maximum_rsu_accumulative_gradients: 10 # how many gradients does an RSU accumulate before updating the central server

neural_network:
  batch_size: 1
  epoch: 10
  # cifar lr = 0.0005
  learning_rate: 0.0005
  # for pascalvoc/yolo training, multiples of 32 are needed, however, some multiples of 32 don't work for some reason?
  height: 320 # industry standard is 416 but it takes up too much memory
  width: 320

seed: 99

pascalvoc_metrics:
  iou_threshold: 0.1


# ********* Statistical Analysis Parameters *********
# Write runtime statistics in csv files.
write_runtime_statistics: false
# Print CPU and Memory Usage
write_cpu_and_memory: false
# Instead of partitioning by classes, partition so that every zone has equal training data for faster performance.
even_distribution: true



# ********* frequently changed parameters ***************
# mnist, cifar10, pascalvoc
dataset: 'pascalvoc'
# 60000 for mnist, 16551 for pascalvoc
num_training_data: 10
num_val_loss: 5000

aggregation_method: 'simplemean' # simplemean, cgc
attack: 'noattack'  # signflip, gaussian, bitflip, label, noattack
num_faulty_grads: 2

cgc_method: 'by-layer' # by-layer, multiply
